{
  "info": {
    "name": "AICI SDE Challenge API",
    "description": "A production-grade microservices architecture with User Service and Todo Service, featuring JWT authentication, PostgreSQL databases, and comprehensive testing.\n\n## Services\n- **User Service** (Port 3001): User authentication and management\n- **Todo Service** (Port 3002): Todo CRUD operations (requires authentication)\n\n## Authentication Flow\n1. Register a user using `POST /api/v1/auth/register`\n2. Login to get JWT token using `POST /api/v1/auth/login`\n3. Use the token in Authorization header for protected endpoints\n\n## Environment Variables\n- `base_url_user`: Base URL for User Service\n- `base_url_todo`: Base URL for Todo Service\n- `auth_token`: JWT token for authentication\n- `user_uuid`: UUID of the authenticated user",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "aici-sde-challenge"
  },
  "item": [
    {
      "name": "User Service",
      "description": "User authentication and management endpoints",
      "item": [
        {
          "name": "User Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url_user}}/api/v1/auth/register",
              "host": ["{{base_url_user}}"],
              "path": ["api", "v1", "auth", "register"]
            },
            "description": "Register a new user account with email and password"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test registration response",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data.user).to.have.property('uuid');",
                  "    pm.expect(jsonData.data.user).to.have.property('user_email');",
                  "});",
                  "",
                  "pm.test(\"Response contains JWT token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "    pm.expect(jsonData.data.token).to.be.a('string');",
                  "    pm.expect(jsonData.data.token.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "// Store user data and token for later use",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('auth_token', jsonData.data.token);",
                  "    pm.environment.set('user_uuid', jsonData.data.user.uuid);",
                  "    pm.environment.set('user_email', jsonData.data.user.user_email);",
                  "    console.log('User registered successfully:', jsonData.data.user.user_email);",
                  "    console.log('JWT token stored in environment');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "User Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{user_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url_user}}/api/v1/auth/login",
              "host": ["{{base_url_user}}"],
              "path": ["api", "v1", "auth", "login"]
            },
            "description": "Login with existing user credentials to get JWT token"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test login response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data.user).to.have.property('uuid');",
                  "    pm.expect(jsonData.data.user).to.have.property('user_email');",
                  "});",
                  "",
                  "pm.test(\"Response contains JWT token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "    pm.expect(jsonData.data.token).to.be.a('string');",
                  "    pm.expect(jsonData.data.token.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "// Store token for later use",
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('auth_token', jsonData.data.token);",
                  "    pm.environment.set('user_uuid', jsonData.data.user.uuid);",
                  "    console.log('User logged in successfully:', jsonData.data.user.user_email);",
                  "    console.log('JWT token stored in environment');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "User Registration - Validation Error",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
            },
            "url": {
              "raw": "{{base_url_user}}/api/v1/auth/register",
              "host": ["{{base_url_user}}"],
              "path": ["api", "v1", "auth", "register"]
            },
            "description": "Test validation error with invalid email and short password"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test validation error response",
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag as false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test(\"Response contains error object\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "});",
                  "",
                  "console.log('Validation error response:', pm.response.json());"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "User Registration - Duplicate Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{user_email}}\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url_user}}/api/v1/auth/register",
              "host": ["{{base_url_user}}"],
              "path": ["api", "v1", "auth", "register"]
            },
            "description": "Test conflict error when trying to register with existing email"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test conflict error response",
                  "pm.test(\"Status code is 409\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag as false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test(\"Response contains conflict error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.code).to.equal('USER_EXISTS');",
                  "    pm.expect(jsonData.error.message).to.include('already exists');",
                  "});",
                  "",
                  "console.log('Conflict error response:', pm.response.json());"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Todo Service",
      "description": "Todo CRUD operations (requires JWT authentication)",
      "item": [
        {
          "name": "Create Todo",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"{{todo_content}}\"\n}"
            },
            "url": {
              "raw": "{{base_url_todo}}/api/v1/todos",
              "host": ["{{base_url_todo}}"],
              "path": ["api", "v1", "todos"]
            },
            "description": "Create a new todo item for the authenticated user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test create todo response",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response contains todo data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('uuid');",
                  "    pm.expect(jsonData.data).to.have.property('content');",
                  "    pm.expect(jsonData.data).to.have.property('user_uuid');",
                  "    pm.expect(jsonData.data).to.have.property('createdAt');",
                  "    pm.expect(jsonData.data).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test(\"Todo belongs to authenticated user\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user_uuid).to.equal(pm.environment.get('user_uuid'));",
                  "});",
                  "",
                  "// Store todo ID for later use",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('todo_id', jsonData.data.id);",
                  "    pm.environment.set('todo_uuid', jsonData.data.uuid);",
                  "    console.log('Todo created successfully with ID:', jsonData.data.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get User Todos",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url_todo}}/api/v1/todos",
              "host": ["{{base_url_todo}}"],
              "path": ["api", "v1", "todos"]
            },
            "description": "Retrieve all todos belonging to the authenticated user"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test get todos response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response contains data array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"All todos belong to authenticated user\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const userUuid = pm.environment.get('user_uuid');",
                  "    jsonData.data.forEach(todo => {",
                  "        pm.expect(todo.user_uuid).to.equal(userUuid);",
                  "    });",
                  "});",
                  "",
                  "console.log('Retrieved', jsonData.data.length, 'todos');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Todo",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"{{updated_todo_content}}\"\n}"
            },
            "url": {
              "raw": "{{base_url_todo}}/api/v1/todos/{{todo_id}}",
              "host": ["{{base_url_todo}}"],
              "path": ["api", "v1", "todos", "{{todo_id}}"]
            },
            "description": "Update an existing todo item (only if owned by authenticated user)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test update todo response",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response contains updated todo data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('content');",
                  "    pm.expect(jsonData.data.content).to.equal(pm.environment.get('updated_todo_content'));",
                  "});",
                  "",
                  "pm.test(\"Todo still belongs to authenticated user\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.user_uuid).to.equal(pm.environment.get('user_uuid'));",
                  "});",
                  "",
                  "console.log('Todo updated successfully');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Todo",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url_todo}}/api/v1/todos/{{todo_id}}",
              "host": ["{{base_url_todo}}"],
              "path": ["api", "v1", "todos", "{{todo_id}}"]
            },
            "description": "Delete an existing todo item (only if owned by authenticated user)"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test delete todo response",
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test(\"Response body is empty\", function () {",
                  "    pm.response.to.not.have.body();",
                  "});",
                  "",
                  "console.log('Todo deleted successfully');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Create Todo - Unauthorized",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Test todo without auth\"\n}"
            },
            "url": {
              "raw": "{{base_url_todo}}/api/v1/todos",
              "host": ["{{base_url_todo}}"],
              "path": ["api", "v1", "todos"]
            },
            "description": "Test unauthorized access when creating todo without JWT token"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test unauthorized response",
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag as false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "console.log('Unauthorized response:', pm.response.json());"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Todo - Not Found",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Updated content\"\n}"
            },
            "url": {
              "raw": "{{base_url_todo}}/api/v1/todos/999999",
              "host": ["{{base_url_todo}}"],
              "path": ["api", "v1", "todos", "999999"]
            },
            "description": "Test not found error when updating non-existent todo"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test not found response",
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Response has success flag as false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});",
                  "",
                  "pm.test(\"Response contains not found error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include('not found');",
                  "});",
                  "",
                  "console.log('Not found response:', pm.response.json());"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Health Checks",
      "description": "Service health check endpoints",
      "item": [
        {
          "name": "User Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url_user}}/health",
              "host": ["{{base_url_user}}"],
              "path": ["health"]
            },
            "description": "Check if User Service is running and healthy"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates service is healthy\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.equal('ok');",
                  "    pm.expect(jsonData.timestamp).to.be.a('string');",
                  "});",
                  "",
                  "console.log('User Service is healthy');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Todo Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url_todo}}/health",
              "host": ["{{base_url_todo}}"],
              "path": ["health"]
            },
            "description": "Check if Todo Service is running and healthy"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response indicates service is healthy\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.equal('ok');",
                  "    pm.expect(jsonData.timestamp).to.be.a('string');",
                  "});",
                  "",
                  "console.log('Todo Service is healthy');"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script to set up test data",
          "if (!pm.environment.get('test_email')) {",
          "    pm.environment.set('test_email', 'test@example.com');",
          "}",
          "if (!pm.environment.get('test_password')) {",
          "    pm.environment.set('test_password', 'password123');",
          "}",
          "if (!pm.environment.get('todo_content')) {",
          "    pm.environment.set('todo_content', 'Test todo item');",
          "}",
          "if (!pm.environment.get('updated_todo_content')) {",
          "    pm.environment.set('updated_todo_content', 'Updated test todo item');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url_user",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "base_url_todo",
      "value": "http://localhost:3002",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_uuid",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_email",
      "value": "",
      "type": "string"
    },
    {
      "key": "todo_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "todo_uuid",
      "value": "",
      "type": "string"
    },
    {
      "key": "test_email",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "test_password",
      "value": "password123",
      "type": "string"
    },
    {
      "key": "todo_content",
      "value": "Test todo item",
      "type": "string"
    },
    {
      "key": "updated_todo_content",
      "value": "Updated test todo item",
      "type": "string"
    }
  ]
}
